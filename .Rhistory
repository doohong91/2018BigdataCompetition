error.cost = matrix(c(0,1,4,0), nrow = 2, dimnames = matrix.dimentions)
bank.c50.model = C5.0(y ~ duration + nr.employed + month + poutcome + contact + cons.conf.idx +
pdays + campaign, data = bank.train, costs = error.cost)
summary(bank.c50.model)
plot(bank.c50.model)
bank.c50.pred = predict(bank.c50.model, bank.test)
confusionMatrix(bank.c50.pred, bank.test$y, positive = "yes")
error.cost = matrix(c(0,1,8,0), nrow = 2, dimnames = matrix.dimentions)
bank.c50.model = C5.0(y ~ duration + nr.employed + month + poutcome + contact + cons.conf.idx +
pdays + campaign, data = bank.train, costs = error.cost)
summary(bank.c50.model)
plot(bank.c50.model)
bank.c50.pred = predict(bank.c50.model, bank.test)
confusionMatrix(bank.c50.pred, bank.test$y, positive = "yes")
bank.contact = bank.contact[-4]
bank = cbind(bank.client, bank.contact, bank.other, bank.context, bank.output)
set.seed(201806)
bank.yes = bank[bank$y == "yes", ]
bank.no = bank[bank$y == "no", ]
sample.yes = sample(nrow(bank.yes), nrow(bank.yes)*0.3)
sample.no = sample(nrow(bank.no), nrow(bank.no)*0.3)
bank.train = rbind(bank.yes[-sample.yes,],bank.no[-sample.no,])
bank.test  = rbind(bank.yes[sample.yes,],bank.no[sample.no,])
matrix.dimentions = list(c("no","yes"),c("no","yes"))
names(matrix.dimentions) = c("predicted", "actual")
error.cost = matrix(c(0,1,8,0), nrow = 2, dimnames = matrix.dimentions)
bank.c50.model = C5.0(y ~ duration + nr.employed + month + poutcome + contact + cons.conf.idx +
pdays + campaign, data = bank.train, costs = error.cost)
summary(bank.c50.model)
plot(bank.c50.model)
bank.c50.pred = predict(bank.c50.model, bank.test)
confusionMatrix(bank.c50.pred, bank.test$y, positive = "yes")
bank.c50.model = C5.0(y ~ duration + nr.employed + month + poutcome + contact + cons.conf.idx +
pdays + campaign, data = bank.train, trials = 10)
bank.c50.model = C5.0(y ~ nr.employed + month + pdays + contact + cons.conf.idx + age +
campaign + poutcome, data = bank.train, trials = 10)
summary(bank.c50.model)
plot(bank.c50.model)
bank.c50.pred = predict(bank.c50.model, bank.test)
confusionMatrix(bank.c50.pred, bank.test$y, positive = "yes")
bank.c50.model = C5.0(y ~ nr.employed + month + pdays + contact + cons.conf.idx + age +
campaign + poutcome, data = bank.train, costs = error.cost)
summary(bank.c50.model)
plot(bank.c50.model)
bank.c50.pred = predict(bank.c50.model, bank.test)
confusionMatrix(bank.c50.pred, bank.test$y, positive = "yes")
bank.c50.model = C5.0(y ~ nr.employed + pdays + month + campaign + contact + cons.conf.idx, data = bank.train, costs = error.cost)
summary(bank.c50.model)
plot(bank.c50.model)
bank.c50.pred = predict(bank.c50.model, bank.test)
confusionMatrix(bank.c50.pred, bank.test$y, positive = "yes")
# create 'pcontact' by 'pdays'
table(bank.other$pdays)
bank.other$pcontact <- as.factor(ifelse(bank.other$pdays == 999, 0, 1))
levels(bank.other$pcontact) = c("no", "yes")
table(bank.other$pcontact)
# create 'newcustomer'
bank.other$newcustomer <- as.factor(ifelse(bank.other$poutcome == "nonexistent" &
bank.other$pdays == 999, 1, 0))
levels(bank.other$newcustomer) = c("no", "yes")
table(bank.other$newcustomer)
bank.other$pdays = as.factor(bank.other$pdays)
bank.other$pdays <- ifelse(bank.other$pdays == 999, NA, bank.other$pdays)
table(bank.other$pdays)
bank = cbind(bank.client, bank.contact, bank.other, bank.context, bank.output)
set.seed(201806)
bank.yes = bank[bank$y == "yes", ]
bank.no = bank[bank$y == "no", ]
sample.yes = sample(nrow(bank.yes), nrow(bank.yes)*0.3)
sample.no = sample(nrow(bank.no), nrow(bank.no)*0.3)
bank.train = rbind(bank.yes[-sample.yes,],bank.no[-sample.no,])
bank.test  = rbind(bank.yes[sample.yes,],bank.no[sample.no,])
bank.c50.model = C5.0(y ~ ., data = bank.train, costs = error.cost, na.action = na.pass)
summary(bank.c50.model)
plot(bank.c50.model)
bank.c50.pred = predict(bank.c50.model, bank.test)
confusionMatrix(bank.c50.pred, bank.test$y, positive = "yes")
bank.c50.model = C5.0(y ~ ., data = bank.train, trials = 10, na.action = na.pass)
summary(bank.c50.model)
plot(bank.c50.model)
bank.c50.pred = predict(bank.c50.model, bank.test)
confusionMatrix(bank.c50.pred, bank.test$y, positive = "yes")
error.cost = matrix(c(0,1,4,0), nrow = 2, dimnames = matrix.dimentions)
bank.c50.model = C5.0(y ~ ., data = bank.train, costs = error.cost, na.action = na.pass)
summary(bank.c50.model)
plot(bank.c50.model)
bank.c50.pred = predict(bank.c50.model, bank.test)
confusionMatrix(bank.c50.pred, bank.test$y, positive = "yes")
library(adabag)
bank.boost.model = boosting(score ~ ., data = bank.train)
bank.boost.model = boosting(score ~ ., data = bank.train, na.action = na.pass)
?boosting
m = train(y ~ ., data = bank, method = "C5.0")
bank.client = raw_data[1:7]
bank.contact = raw_data[8:11]
bank.other = raw_data[12:15]
bank.context = raw_data[16:20]
bank.output = raw_data[21]
# create 'pcontact' by 'pdays'
table(bank.other$pdays)
bank.other$pcontact <- as.factor(ifelse(bank.other$pdays == 999, 0, 1))
levels(bank.other$pcontact) = c("no", "yes")
table(bank.other$pcontact)
bank.other$newcustomer <- as.factor(ifelse(bank.other$poutcome == "nonexistent" &
bank.other$pdays == 999, 1, 0))
levels(bank.other$newcustomer) = c("no", "yes")
table(bank.other$newcustomer)
bank.other$pdays = as.factor(bank.other$pdays)
bank.other$pdays <- ifelse(bank.other$pdays == 999, 0, bank.other$pdays)
table(bank.other$pdays)
bank = cbind(bank.client, bank.contact, bank.other, bank.context, bank.output)
set.seed(201806)
bank.yes = bank[bank$y == "yes", ]
bank.no = bank[bank$y == "no", ]
sample.yes = sample(nrow(bank.yes), nrow(bank.yes)*0.3)
sample.no = sample(nrow(bank.no), nrow(bank.no)*0.3)
bank.train = rbind(bank.yes[-sample.yes,],bank.no[-sample.no,])
bank.test  = rbind(bank.yes[sample.yes,],bank.no[sample.no,])
m = train(y ~ ., data = bank, method = "C5.0")
str(m)
m
m$finalModel
m.final = m$finalModel
summary(m.final)
plot(m.final)
bank.tuning.pred = predict(bank.test)
bank.tuning.pred = predict(m.final, bank.test)
p = predict(m, bank)
table(p, bank$y)
p = predict(m, bank, type = "prob")
p = predict(m, bank)
head(predict(m, bank, type = "prob"))
bank.contact = bank.contact[-4]
bank = cbind(bank.client, bank.contact, bank.other, bank.context, bank.output)
set.seed(201806)
bank.yes = bank[bank$y == "yes", ]
bank.no = bank[bank$y == "no", ]
sample.yes = sample(nrow(bank.yes), nrow(bank.yes)*0.3)
sample.no = sample(nrow(bank.no), nrow(bank.no)*0.3)
bank.train = rbind(bank.yes[-sample.yes,],bank.no[-sample.no,])
bank.test  = rbind(bank.yes[sample.yes,],bank.no[sample.no,])
m = train(y ~ ., data = bank.train, method = "C5.0")
m.final = m$finalModel
summary(m.final)
m
pred = predict(m.final, bank.test)
m.final$rules
View(m.final)
View(nn.model)
View(bank.c50.model)
m = train(y ~ ., data = bank, method = "C5.0")
ctr; = trainControl(method = "cv", number = 10, selectionFunction = "oneSE")
ctrl = trainControl(method = "cv", number = 10, selectionFunction = "oneSE")
m
grid = expand.grid(.model = "rules", .winnow = "FALSE", .trials = 1)
set.seed(201806)
m = train(y ~ ., data = bank, method = "C5.0", trControl = ctrl, tuneGrid = grid)
grid = expand.grid(.model = "rules", .winnow = "FALSE", .trials = c(1,5,10,15,20,25,30,35))
set.seed(201806)
m = train(y ~ ., data = bank, method = "C5.0", trControl = ctrl, tuneGrid = grid)
m
grid = expand.grid(.model = "rules", .winnow = "FALSE", .trials = 1)
set.seed(201806)
m = train(y ~ ., data = bank, method = "C5.0", trControl = ctrl, tuneGrid = grid)
m
summary(m$finalModel)
m = train(y ~ ., data = bank, method = "C5.0")
m
summary(m$finalModel)
grid = expand.grid(.model = "tree", .winnow = "TRUE", .trials = 10)
set.seed(201806)
m2 = train(y ~ ., data = bank, method = "C5.0", trControl = ctrl, tuneGrid = grid)
summary(m$finalModel)
summary(m2$finalModel)
plot(m2$finalModel$tree)
plot(m2$finalModel$rules)
plot(m2$finalModel)
View(bank.context.pca)
View(m2)
m2$finalModel$predictors
m2$finalModel$tree
m2$finalModel$caseWeights
m2$finalModel$rules
m2
bank.c50.model = C5.0(y ~ month + campaign + poutcome + euribor3m + ner.employed + job +
age + contact + emp.var.rate + pdays , data = bank.train, costs = error.cost, na.action = na.pass)
bank.c50.model = C5.0(y ~ month + campaign + poutcome + euribor3m + nr.employed + job +
age + contact + emp.var.rate + pdays , data = bank.train, costs = error.cost, na.action = na.pass)
summary(bank.c50.model)
plot(bank.c50.model)
bank.c50.pred = predict(bank.c50.model, bank.test)
confusionMatrix(bank.c50.pred, bank.test$y, positive = "yes")
bank.c50.model = C5.0(y ~ month + campaign + poutcome + euribor3m + nr.employed + job +
age + contact + emp.var.rate + pdays , data = bank.train, trials = 10, na.action = na.pass)
summary(bank.c50.model)
plot(bank.c50.model)
bank.c50.pred = predict(bank.c50.model, bank.test)
confusionMatrix(bank.c50.pred, bank.test$y, positive = "yes")
bank.c50.model = C5.0(y ~ month + campaign + poutcome + euribor3m + nr.employed + job +
age + contact + emp.var.rate + pdays + education,
data = bank.train, trials = 10)
summary(bank.c50.model)
plot(bank.c50.model)
bank.c50.pred = predict(bank.c50.model, bank.test)
confusionMatrix(bank.c50.pred, bank.test$y, positive = "yes")
bank.c50.model = C5.0(y ~ month + campaign + poutcome + euribor3m + nr.employed + job +
age + contact + emp.var.rate + pdays,
data = bank.train, trials = 10)
summary(bank.c50.model)
plot(bank.c50.model)
bank.c50.pred = predict(bank.c50.model, bank.test)
confusionMatrix(bank.c50.pred, bank.test$y, positive = "yes")
error.cost = matrix(c(0,1,8,0), nrow = 2, dimnames = matrix.dimentions)
bank.c50.model = C5.0(y ~ month + campaign + poutcome + euribor3m + nr.employed + job +
age + contact + emp.var.rate + pdays,
data = bank.train, costs = error.cost)
summary(bank.c50.model)
plot(bank.c50.model)
bank.c50.pred = predict(bank.c50.model, bank.test)
confusionMatrix(bank.c50.pred, bank.test$y, positive = "yes")
library(rpart)
bank.rpart.model = rpart(y ~ month + campaign + poutcome + euribor3m + nr.employed + job +
age + contact + emp.var.rate + pdays,
data = bank.train)
summary(bank.rpart.model)
plot(bank.rpart.model)
install.packages("rattle")
installed.packages("rpart.plot")
install.packages("RColorBrewer")
# install.packages("rattle")
# installed.packages("rpart.plot")
# install.packages("RColorBrewer")
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(bank.rpart.model)
View(rf.model)
rf.model[["terms"]]
View(bank)
# bank.c50.model = C5.0(y ~ month + campaign + poutcome + euribor3m + nr.employed + job +
#                         age + contact + emp.var.rate + pdays,
#                       data = bank.train, costs = error.cost)
bank.c50.model = C5.0(y ~ ., data = bank.train, costs = error.cost)
error.cost = matrix(c(0,1,8,0), nrow = 2, dimnames = matrix.dimentions)
# bank.c50.model = C5.0(y ~ month + campaign + poutcome + euribor3m + nr.employed + job +
#                         age + contact + emp.var.rate + pdays,
#                       data = bank.train, costs = error.cost)
bank.c50.model = C5.0(y ~ ., data = bank.train, costs = error.cost)
summary(bank.c50.model)
plot(bank.c50.model)
bank.c50.pred = predict(bank.c50.model, bank.test)
confusionMatrix(bank.c50.pred, bank.test$y, positive = "yes")
451/3668
3668/451
error.cost = matrix(c(0,1,8.133038,0), nrow = 2, dimnames = matrix.dimentions)
# bank.c50.model = C5.0(y ~ month + campaign + poutcome + euribor3m + nr.employed + job +
#                         age + contact + emp.var.rate + pdays,
#                       data = bank.train, costs = error.cost)
bank.c50.model = C5.0(y ~ ., data = bank.train, costs = error.cost)
summary(bank.c50.model)
plot(bank.c50.model)
bank.c50.pred = predict(bank.c50.model, bank.test)
confusionMatrix(bank.c50.pred, bank.test$y, positive = "yes")
View(bank.output)
raw_data <- read.csv("bank-additional.csv",sep = ';' ,header = T)
raw_data <- read.csv("bank/bank-additional.csv",sep = ';' ,header = T)
data <- raw_data
table(raw_data$age, raw_data$y)
raw_data$previous
str(raw_data)
summary(data)
colSums(is.na(raw_data))
table(raw_data$y)
data$job <- as.numeric(data$job)
table(data$job)
data$job <- ifelse(data$job == 12, 1, data$job)
# martial 변수 전처리 : unknown을 최빈값으로
data$marital <- as.numeric(data$marital)
table(data$marital)
data$marital <- ifelse(data$marital == 4, 2, data$marital)
data$marital <- factor(data$marital, levels = c(1,2,3), labels = c('divorced', 'married', 'single'))
data$job <- factor(data$job, levels = 1:11, labels = job.level)
# job 변수 전처리 unknown 을 최빈값으로
job.level <- levels(data$job)[-12]
summary(data)
table(data$month)
table(data[data$month=='oct',][21])
data[data$month=='mar',][21]
# education 변수 전처리 : unknown을 최빈값으로
edu.level <- levels(data$education)[-8]
data$education <- as.numeric(data$education)
data$education <- ifelse(data$education == 8, 7, data$education)
data$education <- factor(data$education, levels = 1:7, labels = edu.level)
edu.level <- levels(data$education)[-5]
table(data$education)
data$education <- ifelse(data$education == 5, 7, data$education)
data$education <- factor(data$education, levels = c(1,2,3,4,6,7), labels = edu.level)
data <- data[,-c(5,11)]
summary(data)
# housing 변수 전처리 unknown을 최빈값으로
data$housing <- as.numeric(data$housing)
data$housing <- ifelse(data$housing == 2, 3 ,data$housing)
data$housing <- factor(data$housing, levels = c(1,3), labels = c('no', 'yes'))
# loan 변수 전처리 unknown을 최빈값으로
data$loan <- as.numeric(data$loan)
data$loan <- ifelse(data$loan == 2, 1, data$loan)
data$loan <- factor(data$loan, levels = c(1,3), labels = c('no', 'yes'))
# pdays 변수 전처리. 21보다 큰경우와 아닌경우로 나눈다
data$pdays <- ifelse(data$pdays>21, 0, 1)
# previous 변수 factor 화
table(data$previous, data$y)
data$previous <- factor(data$previous)
data$previous <- as.numeric(data$previous)
data$campaign <- ifelse(data$campaign > 11, 3, ifelse(data$campaign >4, 2, 1))
data$campaign <- factor(data$campaign, levels = c(1,2,3), labels = c('low', 'medium', 'high'))
smp.yes <- which(data$y == 'yes')
smp.yes2 <- smp.yes[smp.yes1]
smp.yes3 <- smp.yes[-smp.yes1]
smp.no <- sample(which(data$y == 'no'),451 , replace = F)
smp.no2 <- smp.no[smp.no1]
smp.no1 <- sample(451,315 , replace = F)
# campaign 변수 범주화
table(data$campaign, data$y)
data$education <- as.numeric(data$education)
smp.no3 <- smp.no[-smp.no1]
table(data$loan)
table(data$education)
# 필요없는 변수 제거
colnames(data)
smp.yes1 <- sample(451,315 , replace = F)
table(data$housing)
smp.train <- c(smp.yes2, smp.no2)
data$pdays <- as.factor(data$pdays)
smp.test <- c(smp.yes3, smp.no3)
test <- data[smp.test,]
train <- data[smp.train,]
glm.model <- glm(y ~ ., data = train, family = binomial)
glm.pred <- predict(glm.model, test, type = 'response')
glm.pred1 <- ifelse(glm.pred>0.5,1,0)
# glm full model
Null.model <- glm(y ~ 1, data = train, family = binomial)
glm.pred1 <- factor(glm.pred1, levels=c(0,1), labels = c('no','yes'))
confusionMatrix(glm.pred1, test$y, positive = 'yes')
both.glm <- glm(y ~ pdays + month + campaign + emp.var.rate + cons.price.idx +
contact + euribor3m + loan
, data = train, family = binomial)
both.glm <- step(Null.model, scope = list(lower = Null.model, upper = glm.model), direction = 'both')
smp.train <- c(smp.yes2, smp.no2)
smp.yes <- which(data$y == 'yes')
smp.yes1 <- sample(451,315 , replace = F)
smp.yes2 <- smp.yes[smp.yes1]
smp.yes3 <- smp.yes[-smp.yes1]
smp.no <- sample(which(data$y == 'no'),451 , replace = F)
smp.no1 <- sample(451,315 , replace = F)
smp.no2 <- smp.no[smp.no1]
smp.no3 <- smp.no[-smp.no1]
smp.train <- c(smp.yes2, smp.no2)
smp.test <- c(smp.yes3, smp.no3)
train <- data[smp.train,]
test <- data[smp.test,]
c50.model = C5.0(y ~ ., data = train)
plot(c50.model)
c50.pred = predict(c50.model, bank.test)
c50.pred = predict(c50.model, test)
confusionMatrix(c50.pred, test$y, positive = "yes")
?rpart
raw_data <- read.csv("bank/bank-additional.csv",sep = ';' ,header = T)
bank.client = raw_data[1:7]
bank.contact = raw_data[8:11]
bank.other = raw_data[12:15]
bank.context = raw_data[16:20]
bank.output = raw_data[21]
bank.client = bank.client[-5]
bank.other$pcontact <- as.factor(ifelse(bank.other$pdays == 999, 0, 1))
levels(bank.other$pcontact) = c("no", "yes")
bank.other$newcustomer <- as.factor(ifelse(bank.other$poutcome == "nonexistent" &
bank.other$pdays == 999, 1, 0))
levels(bank.other$newcustomer) = c("no", "yes")
bank.other$pdays = as.factor(bank.other$pdays)
bank.other$pdays <- ifelse(bank.other$pdays == 999, 0, bank.other$pdays)
bank.contact = bank.contact[-4]
bank = cbind(bank.client, bank.contact, bank.other, bank.context, bank.output)
set.seed(122)
bank.yes = bank[bank$y == "yes", ]
bank.no = bank[bank$y == "no", ]
sample.yes = sample(nrow(bank.yes), nrow(bank.yes)*0.7)
sample.no = sample(nrow(bank.no), nrow(bank.no)*0.7)
train = rbind(bank.yes[sample.yes,],bank.no[sample.no,])
test  = rbind(bank.yes[-sample.yes,],bank.no[-sample.no,])
m = train(y ~  month + campaign + poutcome + euribor3m + nr.employed + job +
age + contact + emp.var.rate + pdays, data = train, method = "C5.0")
library(caret)
m = train(y ~  month + campaign + poutcome + euribor3m + nr.employed + job +
age + contact + emp.var.rate + pdays, data = train, method = "C5.0")
m
ctrl = trainControl(method = "cv", number = 10, selectionFunction = "oneSE")
grid = expand.grid(.model = "tree", .winnow = "TRUE", .trials = 20)
set.seed(122)
m2 = train(y ~ ., data = train, method = "C5.0", trControl = ctrl, tuneGrid = grid)
m2
m = train(y ~ nr.employed + month + poutcome + contact + cons.conf.idx +
campaign + age + previous, data = train, method = "C5.0")
m
ctrl = trainControl(method = "cv", number = 10, selectionFunction = "oneSE")
grid = expand.grid(.model = "rules", .winnow = "TRUE", .trials = 20)
set.seed(122)
m2 = train(y ~ nr.employed + month + poutcome + contact + cons.conf.idx +
campaign + age + previous, data = train, method = "C5.0",
trControl = ctrl, tuneGrid = grid)
m2
?read.xlsx
??read.xlsx
library(openxlsx)
library(dplyr)
library(ggplot2)
stock = read.csv("주가2.csv", stringsAsFactor = F)
getwd()
stock = read.csv("주가2.csv", stringsAsFactor = F)
stock = read.xlsx("주가2.xlsx")
getwd()
setwd("A:/Google Drive/공모전/미래에셋/")
주가2.xlsx
stock = read.xlsx("주가2.xlsx")
stock$날짜 = as.Date(ISOdate(substr(stock$날짜,1,4),substr(stock$날짜,5,6),substr(stock$날짜,7,8)))
stock = mutate(stock, 시가총액 = 시가 * 총주식수, 일봉 = 종가 - 시가)
name = names(table(stock$종목명))
assign(paste0('data_',i),stock[stock$종목명 == name[i],])
for(i in 1:length(name)){
assign(paste0('data_',i),stock[stock$종목명 == name[i],])
}
mirae_dir = "A:/Google Drive/공모전/미래에셋/data/"
?write.csv
write.csv(paste0('data_',i), paste0(mirae_dir,'data_',i,'.csv'),row.names = F)
for(i in length(name)){
write.csv(paste0('data_',i), paste0(mirae_dir,'data_',i,'.csv'),row.names = F)
}
for(i in 1:length(name)){
write.csv(paste0('data_',i), paste0(mirae_dir,'data_',i,'.csv'),row.names = F)
}
write.csv(x = paste0('data_',i), file = paste0(mirae_dir,'data_',i,'.csv'),row.names = F)
for(i in 1:length(name)){
write.csv(x = paste0('data_',i), file = paste0(mirae_dir,'data_',i,'.csv'),row.names = F)
}
for(i in 1:length(name)){
write.csv(x = paste0('data_',i), file = paste0(mirae_dir,'data_',i,'.csv'),row.names = F)
}
for(i in 1:length(name)){
write.csv(x = get(paste0('data_',i)), file = paste0(mirae_dir,'data_',i,'.csv'),row.names = F)
}
View(data_93)
View(data_3)
View(data_3)
library(ggplot2)
library(dplyr)
library(GGally)
library(gridExtra)
install.packages("GGally")
install.packages('gridExtra')
library(ggplot2)
library(dplyr)
library(GGally)
library(gridExtra)
getwd()
setwd("../Naver/")
data = read.csv("data.csv")
str(data)
summary(data)
sum(is.na(data))
data$diagnosis = factor(data$diagnosis, levels = c("B", "M"), labels = c("Benign", "Malignant"))
round(prop.table(table(data$diagnosis))*100,1)
ggplot(data, aes(diagnosis)) + geom_bar() + ggtitle('Diagnosis of breast tissue')
ggpairs(data[3:12])
ggpairs(data[13:22])
ggpairs(data[23:32])
raw_data <- read.csv("../Naver/bank-additional.csv",sep = ';' ,header = T)
str(raw_data)
summary(raw_data)
colSums(is.na(bank))
colSums(is.na(raw_data))
table(bank$y)
table(raw_data$y)
raw_data <- read.csv("../Naver/data/bank-additional-full.csv",sep = ';' ,header = T)
str(raw_data)
summary(raw_data)
data <- read.csv("../Naver/data/bank-additional-full.csv",sep = ';' ,header = T)
str(data)
table(data$age)
summary(data)
library(ggplot2)
ggplot(data, aes(age)) + geom_histogram(aes(fill = factor(y), lwd = 1, alpha = 0.8))
ggplot(data, aes(age)) + geom_density(aes(fill = factor(y), lwd = 1, alpha = 0.8))
ggplot(data, aes(age)) + geom_density(aes(fill = factor(y)), lwd = 1, alpha = 0.8)
ggplot(data, aes(duration)) + geom_density(aes(fill = factor(y)), lwd = 1, alpha = 0.8)
ggplot(data, aes(campaign)) + geom_density(aes(fill = factor(y)), lwd = 1, alpha = 0.8)
ggplot(data, aes(previous)) + geom_density(aes(fill = factor(y)), lwd = 1, alpha = 0.8)
ggplot(data, aes(emp.var.rate)) + geom_density(aes(fill = factor(y)), lwd = 1, alpha = 0.8)
ggplot(data, aes(cons.conf.idx)) + geom_density(aes(fill = factor(y)), lwd = 1, alpha = 0.8)
ggplot(data, aes(euribor3m)) + geom_density(aes(fill = factor(y)), lwd = 1, alpha = 0.8)
ggplot(data, aes(nr.employed)) + geom_density(aes(fill = factor(y)), lwd = 1, alpha = 0.8)
ggplot(data, aes(job)) + geom_histogram(aes(fill = factor(y)), lwd = 1, alpha = 0.8)
ggplot(data, aes(job)) + geom_bar(aes(fill = factor(y)), lwd = 1, alpha = 0.8)
ggplot(data, aes(marital)) + geom_bar(aes(fill = factor(y)), alpha = 0.8)
ggplot(data, aes(education)) + geom_bar(aes(fill = factor(y)), alpha = 0.8)
ggplot(data, aes(default)) + geom_bar(aes(fill = factor(y)), alpha = 0.8)
ggplot(data, aes(housing)) + geom_bar(aes(fill = factor(y)), alpha = 0.8)
ggplot(data, aes(day_of_week)) + geom_bar(aes(fill = factor(y)), alpha = 0.8)
ggplot(data, aes(loan)) + geom_bar(aes(fill = factor(y)), alpha = 0.8)
ggplot(data, aes(contact)) + geom_bar(aes(fill = factor(y)), alpha = 0.8)
ggplot(data, aes(month)) + geom_bar(aes(fill = factor(y)), alpha = 0.8)
ggplot(data, aes(day_of_week)) + geom_bar(aes(fill = factor(y)), alpha = 0.8)
ggplot(data, aes(pdays)) + geom_bar(aes(fill = factor(y)), alpha = 0.8)
ggplot(data, aes(poutcome)) + geom_bar(aes(fill = factor(y)), alpha = 0.8)
